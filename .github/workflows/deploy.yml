name: Deploy
on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VM_HOST: ${{ secrets.VM_HOST }}
      VM_USER: ${{ secrets.VM_USER }}
      VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          printf '%s\n' "$VM_SSH_KEY" > ~/.ssh/id_vm
          chmod 600 ~/.ssh/id_vm
          ssh-keyscan -H "$VM_HOST" >> ~/.ssh/known_hosts

      - name: Deploy to VM
        run: |
          ssh -i ~/.ssh/id_vm -o StrictHostKeyChecking=yes "${VM_USER}@${VM_HOST}" 'bash -s' <<'REMOTE'
          set -euo pipefail
          cd /opt/sustainacore-ai
          git fetch --all
          git reset --hard origin/main
          python3 -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python - <<'PY'
import importlib, sys
missing = []
for module in ("fastapi", "uvicorn"):
    try:
        importlib.import_module(module)
    except Exception as exc:  # pragma: no cover - deployment guardrail
        missing.append(f"{module}: {exc}")
if missing:
    print("::error::Failed to import dependencies::" + "; ".join(missing))
    sys.exit(1)
PY
          sudo systemctl daemon-reload || true
          sudo systemctl restart sustainacore-ai.service
          if ! sudo systemctl is-active --quiet sustainacore-ai.service; then
            echo '::error::sustainacore-ai.service failed to start'
            exit 1
          fi
          curl --fail --retry 8 --retry-delay 5 --retry-connrefused "http://127.0.0.1:8080/healthz"
          curl --fail --retry 8 --retry-delay 5 --retry-connrefused -s -X POST "http://127.0.0.1:8080/ask" \
            -H 'Content-Type: application/json' --data '{"question":"ping","top_k":1}' \
            | python3 - <<'PY'
import json, sys
try:
    payload = json.load(sys.stdin)
except Exception as exc:  # pragma: no cover - deployment guardrail
    print(f"::error::Failed to parse /ask response: {exc}")
    sys.exit(1)
answer = str(payload.get("answer") or "").strip()
if not answer:
    print("::error::/ask returned an empty answer")
    sys.exit(1)
PY
          REMOTE

      - name: Verify public health
        run: |
          curl --fail --retry 12 --retry-delay 5 "https://ai.sustainacore.org/healthz"

      - name: Service logs (on failure)
        if: failure()
        run: |
          ssh -i ~/.ssh/id_vm -o StrictHostKeyChecking=yes "${VM_USER}@${VM_HOST}" \
            'journalctl -u sustainacore-ai.service -n 200 --no-pager' | tee deploy_logs.txt

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-logs
          path: deploy_logs.txt
          if-no-files-found: ignore
