name: Deploy
on:
  push:
    branches: [main]
  workflow_dispatch:

# allow this workflow to post PR comments and read/write contents
permissions:
  contents: write
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VM_HOST: ${{ secrets.VM_HOST }}
      VM_USER: ${{ secrets.VM_USER }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Lint & tests
        run: |
          python -m pip install -U pip wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest ruff
          ruff check .
          pytest -q

      - name: Setup SSH
        env:
          VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "$VM_SSH_KEY" > ~/.ssh/id_vm
          chmod 600 ~/.ssh/id_vm
          ssh-keyscan -H "$VM_HOST" >> ~/.ssh/known_hosts

      - name: Deploy to VM
        run: |
          ssh -i ~/.ssh/id_vm -o StrictHostKeyChecking=yes "${VM_USER}@${VM_HOST}" 'bash -s' <<'REMOTE'
          set -euo pipefail
          cd /opt/sustainacore-ai
          git fetch --all
          git reset --hard origin/main
          sudo systemctl daemon-reload || true
          sudo systemctl restart sustainacore-ai.service
          REMOTE

      - name: Verify health endpoint
        run: |
          curl --fail --retry 12 --retry-delay 5 --retry-connrefused "http://${VM_HOST}:8080/healthz"

      # -------- Failure feedback loop to PR ----------
      - name: Fetch service logs (on failure)
        if: failure()
        run: |
          ssh -i ~/.ssh/id_vm -o StrictHostKeyChecking=yes "${VM_USER}@${VM_HOST}" \
            'journalctl -u sustainacore-ai.service -n 200 --no-pager' | tee deploy_logs.txt

      - name: Upload logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-logs
          path: deploy_logs.txt
          if-no-files-found: ignore

      - name: Comment PR with failure summary
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const fs = require('fs');
            let body = `### ðŸš¨ Deploy failed\nRun: ${runUrl}\n\n`;
            try { body += "```\n" + fs.readFileSync('deploy_logs.txt','utf8').slice(0,4000) + "\n```"; } catch(e) {}
            const headRef = process.env.GITHUB_REF_NAME || (process.env.GITHUB_REF || '').replace('refs/heads/','');
            const prs = await github.rest.pulls.list({ owner: context.repo.owner, repo: context.repo.repo, head: `${context.repo.owner}:${headRef}`, state: 'open' });
            if (prs.data.length) {
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prs.data[0].number, body });
            } else {
              await github.rest.repos.createCommitComment({ owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha, body });
            }
